{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { ActionTypes } from './types.backlog';\nconst initialState = {\n  backlogs: []\n};\nexport default ((state = initialState, action) => {\n  switch (action.type) {\n    case ActionTypes.ADD_BACKLOG:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        backlogs: [...state.backlogs, action.payload]\n      });\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["/Users/masiuciszek/web-dev/myWebProj/backlog_list/store/backlog_list/backlog.reducer.ts"],"names":["ActionTypes","initialState","backlogs","state","action","type","ADD_BACKLOG","payload"],"mappings":";;;;;;AAAA,SAAgBA,WAAhB,QAAuD,iBAAvD;AAEA,MAAMC,YAAmB,GAAG;AAC1BC,EAAAA,QAAQ,EAAE;AADgB,CAA5B;AAGA,gBAAe,CAACC,KAAY,GAAGF,YAAhB,EAA8BG,MAA9B,KAA6D;AAC1E,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKL,WAAW,CAACM,WAAjB;AACE,6CACKH,KADL;AAEED,QAAAA,QAAQ,EAAE,CAAC,GAAGC,KAAK,CAACD,QAAV,EAAoBE,MAAM,CAACG,OAA3B;AAFZ;;AAKF;AACE,aAAOJ,KAAP;AARJ;AAUD,CAXD","sourcesContent":["import { State, ActionTypes, ActionTypesReducer } from './types.backlog';\n\nconst initialState: State = {\n  backlogs: [],\n};\nexport default (state: State = initialState, action: ActionTypesReducer) => {\n  switch (action.type) {\n    case ActionTypes.ADD_BACKLOG:\n      return {\n        ...state,\n        backlogs: [...state.backlogs, action.payload],\n      };\n\n    default:\n      return state;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}